
# Classes
module Const
  class Const
    MAXVAL: Integer
    CARTVERT: Integer
    INFTY: Integer
    MAXOUTLETS: Integer
    MAXSYM: Integer
    MAXELIST: Integer
    MAXASTACK: Integer
    MAXLEV: Integer
    MVERTS: Integer
    EDGES: Integer
    MAXRING: Integer
    POWER: Array[Integer]
    SIMATCHNUMBER: Array[Integer]
  end

  # class Assert < Minitest::Test
  # end
end

module ReadFile
  class ReadFile
    def initialize: (?nil _deg, ?nil _axles) -> void

    private
    def read_file: -> nil
  end

  class GoodConfs < ReadFile
    attr_reader data: untyped
    def initialize: -> void

    private
    def read_file: -> untyped
  end

  class Tactics < ReadFile
    attr_reader tacs: Array[Array[String]]
    def initialize: (Integer deg) -> void

    private
    def read_file: (Integer deg) -> bool
  end

  class GoodConfsR < ReadFile
    attr_reader data: Array[Array[Array[Integer]]]
    def initialize: -> void

    private
    def read_file: -> bool
  end
end

module Strip
  class StripR
    attr_reader edgeno: Array[Array[Integer]]
    def initialize: (Array[Array[Integer]] g_conf) -> void

    private
    def strip_sub2: (
      Array[Array[Integer]] g_conf,
      Integer verts,
      Integer ring,
      Array[bool] done,
      Integer term) -> Integer
    def in_interval: (Array[Integer], Array[bool] done) -> Integer
    def in_get: (Integer, Integer, bool, Array[bool] done, Array[Integer]) -> Integer
    def strip_sub3: (
      Array[Array[Integer]] g_conf,
      Integer ring,
      Array[bool] done,
      Integer term) -> void
  end
end

module Angles
  class AnglesR
    attr_reader angle: Array[Array[Integer]]
    attr_reader diffangle: Array[Array[Integer]]
    attr_reader sameangle: Array[Array[Integer]]
    attr_reader contract: Array[Integer]
    def initialize: (
      Array[Array[Integer]] g_conf,
      Array[Array[Integer]] edgeno
    ) -> void

    private
    def angles_sub2: (
      Array[Array[Integer]] g_conf,
      Array[Array[Integer]] edgeno
    ) -> bool
    def angles_sub2_sub: (
      Integer xxx,
      Integer yyy,
      Integer ccc
    ) -> void
    def angles_sub3: (
      Array[Array[Integer]] g_conf
    ) -> bool
  end
end

module Findlive
  class FindliveR
    attr_reader n_live: Integer
    attr_reader live: Array[Integer]
    def initialize: (
      Array[Array[Integer]] g_conf,
      Array[Array[Integer]] angle
    ) -> void

    private
    def findlive: (
      Integer ring,
      Integer bigno,
      Integer ncodes,
      Array[Array[Integer]] angle,
      Integer extentclaim
    ) -> void
    def findlive_sub: (
      Integer bigno,
      Array[Array[Integer]] angle,
      Integer ring,
      Integer edd,
      Integer ncodes,
      Integer jjj,
      Array[Integer] ccc,
      Array[Integer] forbidden
    ) -> void
    def record: (
      Array[Integer] col,
      Integer ring,
      Array[Array[Integer]] angle,
      Integer extent,
      Integer bigno
    ) -> Integer
    def print_status: (
      Integer ring,
      Integer totalcols,
      Integer extent,
      Integer _extentclaim
    ) -> void
  end
end


module StillReal
  def augment: (
    Integer nnn,
    Array[Integer] interval,
    Integer depth,
    Array[Array[Integer]] weight,
    Array[Array[Array[Integer]]] match_w,
    Array[Integer] pnreal,
    Integer ring,
    Integer basecol,
    Integer onn,
    Array[Integer] pbit,
    Array[Integer] prt,
    Integer nchar,
    Array[Integer] real,
    Array[Integer] live
  ) -> bool
  def check_reality: (
    Integer depth,
    Array[Array[Integer]] weight,
    Array[Integer] pnreal,
    Integer ring,
    Integer basecol,
    Integer on,
    Array[Integer] pbit,
    Array[Integer] prealterm,
    Integer nchar,
    Array[Integer] real,
    Array[Integer] live
  ) -> void
  def bit_lshift: (Array[Integer] pbit) -> bool
  def still_real?: (Integer col, Array[Integer] choice, Integer depth, Integer on, Array[Integer] live) -> bool
end

module Update
  class UpdateR
    include StillReal
    attr_reader n_live2: Integer
    attr_reader live2: Array[Integer]
    def initialize: (Array[Array[Integer]] g_conf, Integer n_live, Array[Integer] live) -> void
    private
    def update: (Integer ring, Integer nchar, Integer ncodes, Array[Integer] real) -> bool
    def update_sub?: (Integer ncodes) -> bool
    def test_match: (Integer ring, Integer nchar, Array[Integer] real) -> void
  end
end


class Reduce
  include Strip
  include ReadFile
  include Const
  include Angles
  include Findlive

  def self.reduce: -> nil
  def self.c_d_reducible?: (Array[Array[Integer]] g_conf, Integer iii) -> bool
end
